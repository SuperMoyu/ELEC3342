----------------------------------------------------------------------------------
-- Course: ELEC3342
-- Module Name: mucodec - Behavioral
-- Project Name: Template for Music Code Decoder for Homework 1
-- Created By: hso
--
-- Copyright (C) 2022 Hayden So
--
-- This program is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <https://www.gnu.org/licenses/>.
----------------------------------------------------------------------------------
LIBRARY ieee;
USE ieee.std_logic_1164.ALL;

entity mcdecoder is
    port (
        din     : IN std_logic_vector(2 downto 0);
        valid   : IN std_logic;
        clr     : IN std_logic;
        clk     : IN std_logic;
        dout    : OUT std_logic_vector(7 downto 0);
        dvalid  : OUT std_logic;
        error   : OUT std_logic);
end mcdecoder;

architecture Behavioral of mcdecoder is
    type state_type is (St_RESET,St_START0,St_START1, St_ERROR, St_READ0, St_READ1,  St_END0 ,St_END1);
    signal state, next_state : state_type := St_RESET;
    signal a: std_logic:='0';
    signal pre: std_logic_vector(2 downto 0):="000";

    -- Define additional signal needed here as needed
begin
    sync_process: process (clk, clr)
    begin
       dvalid<='0';
        if clr = '1' then
            state<= St_RESET;
            next_state <= St_RESET;
            
        elsif rising_edge(clk) then
        
        
        if (valid ='1') then
--             dvalid <='1';
            case(state) is
            when St_RESET =>
            ------- uesless
                dout<="01100001";
                 a <= '0';
                if (din ="000") then

                    next_state <= St_START0;
                else
                    next_state<=St_RESET;
                end if;
                
            when St_START0 =>
            ------- uesless
                dout<="01100010";
                                if(din = "000") then dout<="00110000";
                elsif(din = "001") then dout<="00110001";
                elsif(din = "010") then dout<="00110010";
                elsif(din = "011") then dout<="00110011";
                elsif(din = "100") then dout<="00110100";
                elsif(din = "101") then dout<="00110101";
                elsif(din = "110") then dout<="00110110";
            elsif(din = "111") then dout<="00110111";
    end if;
                if (din ="111" and a='0') then
                
                    next_state <= St_START1;
                elsif (din ="111" and a='1') then
                    next_state <= St_READ0;
                    a <= '0';
                end if;
               
            when St_START1 =>
                        ------- uesless
                    dout<="01100011";
                    a <='1';
                    if (din ="000") then
                    next_state <= St_START0;
                    end if;
                    
                
            when St_READ0 =>
                            ------- uesless
                
                if (din ="000") then
                    --next_state <= St_ERROR;
                elsif (din = "111") then
                    next_state <= St_END0;
                else
                    pre<=din;
                    next_state <= St_READ1; 
                end if; 
                
            when St_READ1 =>
                dvalid <='1';
                if (din ="000" ) then
                    --next_state <= St_ERROR;
                elsif (din = "111") then
                    next_state <= St_END0;
                else
                    next_state <=St_READ0;
                    case(pre) is
                    when "001"=>
                        if (din = "010") then
                            dout <= "01000010";
                        elsif (din = "011") then
                            dout <= "01000100";
                        elsif (din = "100") then
                            dout <= "01001000";
                        elsif (din = "101") then
                            dout <= "01001100";
                        elsif (din = "110") then
                            dout <= "01010010";
                        end if;
                    when "010"=>
                        if (din = "001") then
                            dout <= "01000001";
                        elsif (din = "011") then
                            dout <= "01000111";
                        elsif (din = "100") then
                            dout <= "01001011";
                        elsif (din = "101") then
                            dout <= "01010001";
                        elsif (din = "110") then
                            dout <= "01010110";
                        else
                        end if;          
                    when "011"=>
                        if (din = "001") then
                            dout <= "01000011";
                        elsif (din = "010") then
                            dout <= "01000110";
                        elsif (din = "100") then
                            dout <= "01010000";
                        elsif (din = "101") then
                            dout <= "01010101";
                        elsif (din = "110") then
                            dout <= "01011010";
                        end if;
                    when "100"=>
                        if (din = "001") then
                            dout <= "01000101";
                        elsif (din = "010") then
                            dout <= "01001010";
                        elsif (din = "011") then
                            dout <= "01001111";
                        elsif (din = "101") then
                            dout <= "01011001";
                        elsif (din = "110") then
                            dout <= "00101110";
                        end if; 
                    when "101"=>
                        if (din = "001") then
                            dout <= "01001001";
                        elsif (din = "010") then
                            dout <= "01001110";
                        elsif (din = "011") then
                            dout <= "01010100";
                        elsif (din = "100") then
                            dout <= "01011000";
                        elsif (din = "110") then
                            dout <= "00111111";
                        end if;
                    when "110"=>
                        if (din = "001") then
                            dout <= "01001101";
                        elsif (din = "010") then
                            dout <= "01010011";
                        elsif (din = "011") then
                            dout <= "01010111";
                        elsif (din = "100") then
                            dout <= "00100001";
                        elsif (din = "101") then
                            dout <= "00100000";
                    end if; 
                when others=>
                    --dout<="01101101";
        
            end case;
                end if; 
                
            when St_END0 =>
                dout<="01100101";
                if (din ="000" and a='0') then
                    next_state <= St_END1;
                elsif (din ="000" and a='1') then
                    a<='0';
                    next_state <= St_RESET;         
                end if;
            
            when St_END1 =>
                dout<="01100110";
                if (din ="111") then
                    a<='1';
                    next_state <= St_END0;
                end if;
            when St_ERROR =>
            dout<="01100111";
                error <='1';
            end case;
            end if;
            end if;
            state<=next_state;

    end process;
    


end Behavioral;
